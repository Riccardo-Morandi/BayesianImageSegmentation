knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rayshader)
library(patchwork)
library(ggplot2)
library(plot.matrix)
library(bayesImageS)
library(coda)
library(viridis)
library(rayshader)
library(patchwork)
library(ggplot2)
library(plot.matrix)
library(bayesImageS)
library(coda)
library(viridis)
library(tidyverse)
D = read.table("/Users/macbookpro/Documents/Bayesian Statistics/Project/Raw_data/LIPIDI/78 variabili/101_lipidi-PreProcessed-IM-Step1-Step2-Step4-Step5-101.txt")
D0 = D
D0[is.na(D0)] = 0
pixels = read.table("/Users/macbookpro/Documents/Bayesian Statistics/Project/Raw_data/LIPIDI/78 variabili/101_lipidi-PreProcessed-XYCoordinates-Step1-Step2-Step4-Step5-101.txt")
colnames(D0) = substr(colnames(D0),1,4)
colnames(pixels) = c("x","y")
Data_long = as_tibble(data.frame( pixels, D0 ))
max_number_of_pixels = apply(Data_long[,1:2],2,max)
pca = princomp(D0)
pcascore1 <-as.vector(pca$scores[,1])
mask <-matrix(0,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
mask[pixels[i,1],pixels[i,2]] = 1
}
neigh <- getNeighbors(mask = mask, c(2,2,0,0))
block <- getBlocks(mask = mask, 2)
q <- 3
betacritic = log(1 + sqrt(q))
mu <- c(-15,0,18)
sd <- rep(2,q)
priors <- list()
priors$k <- q
priors$mu <- c(-15,0,18)
priors$mu.sd <- rep(30,q)
priors$sigma <- rep(2,q)
priors$sigma.nu <- rep(0.125,q)
prioraux <- priors
prioraux$beta <- c(0,1)
mh<- list(algorithm="pseudolikelihood", bandwidth=1)
resaux<- mcmcPotts(pcascore1, neigh, block, prioraux, mh, 10, 5)
labels <- resaux$z # this is just to get the correct data type
for(i in 1:dim(pixels)[1]){
labels[i,] = c(0,0,0)
labels[i,which.max(runif(q))] = 1
}
q <- 3
betacritic = log(1 + sqrt(q))
mu <- c(-15,0,18)
sd <- rep(2,q)
priors <- list()
priors$k <- q
priors$mu <- c(-15,0,18)
priors$mu.sd <- rep(30,q)
priors$sigma <- rep(2,q)
priors$sigma.nu <- rep(0.125,q)
prioraux <- priors
prioraux$beta <- c(0,1)
mh<- list(algorithm="pseudolikelihood", bandwidth=1)
resaux<- mcmcPotts(pcascore1, neigh, block, prioraux, mh, 1, 0)
labels <- resaux$z # this is just to get the correct data type
for(i in 1:dim(pixels)[1]){
labels[i,] = c(0,0,0)
labels[i,which.max(runif(q))] = 1
}
resbc <- gibbsPotts(pcascore1, labels, betacritic, mu, sd, neigh, block, priors, niter = 2000)
resbc <- gibbsPotts(pcascore1, labels, betacritic, mu, sd, neigh, block, priors, niter = 1000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = viridis(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
resbc <- gibbsPotts(pcascore1, labels, 1.5, mu, sd, neigh, block, priors, niter = 1000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = viridis(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
resbc <- gibbsPotts(pcascore1, labels, 2, mu, sd, neigh, block, priors, niter = 1000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = viridis(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
resbc <- gibbsPotts(pcascore1, labels, 1.4, mu, sd, neigh, block, priors, niter = 1000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = viridis(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
resbc <- gibbsPotts(pcascore1, labels, 1.5, mu, sd, neigh, block, priors, niter = 1000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = viridis(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
resbc <- gibbsPotts(pcascore1, labels, 1.6, mu, sd, neigh, block, priors, niter = 1000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = viridis(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
resbc <- gibbsPotts(pcascore1, labels, 1.7, mu, sd, neigh, block, priors, niter = 1000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = viridis(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
resbc <- gibbsPotts(pcascore1, labels, 1.8, mu, sd, neigh, block, priors, niter = 1000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = viridis(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
resbc <- gibbsPotts(pcascore1, labels, 1.5, mu, sd, neigh, block, priors, niter = 1000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = viridis(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
resbc <- gibbsPotts(pcascore1, labels, 0.5, mu, sd, neigh, block, priors, niter = 1000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = viridis(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
resbc <- gibbsPotts(pcascore1, labels, 0.1, mu, sd, neigh, block, priors, niter = 1000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = viridis(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
resbc <- gibbsPotts(pcascore1, labels, 0, mu, sd, neigh, block, priors, niter = 1000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = viridis(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
resbc <- gibbsPotts(pcascore1, labels, 1, mu, sd, neigh, block, priors, niter = 1000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = viridis(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
resbc <- gibbsPotts(pcascore1, labels, 1.5, mu, sd, neigh, block, priors, niter = 1000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = viridis(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
resbc <- gibbsPotts(pcascore1, labels, betacritic, mu, sd, neigh, block, priors, niter = 1000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = viridis(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rayshader)
library(patchwork)
library(ggplot2)
library(plot.matrix)
library(bayesImageS)
library(coda)
library(viridis)
D = read.table("/Users/macbookpro/Documents/Bayesian Statistics/Project/Raw_data/LIPIDI/78 variabili/101_lipidi-PreProcessed-IM-Step1-Step2-Step4-Step5-101.txt")
D0 = D
D0[is.na(D0)] = 0
pixels = read.table("/Users/macbookpro/Documents/Bayesian Statistics/Project/Raw_data/LIPIDI/78 variabili/101_lipidi-PreProcessed-XYCoordinates-Step1-Step2-Step4-Step5-101.txt")
colnames(D0) = substr(colnames(D0),1,4)
colnames(pixels) = c("x","y")
Data_long = as_tibble(data.frame( pixels, D0 ))
max_number_of_pixels = apply(Data_long[,1:2],2,max)
pca = princomp(D0)
pcascore1 <-as.vector(pca$scores[,1])
mask <-matrix(0,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
mask[pixels[i,1],pixels[i,2]] = 1
}
neigh <- getNeighbors(mask = mask, c(2,2,0,0))
block <- getBlocks(mask = mask, 2)
q <- 5
betacritic = log(1 + sqrt(q))
mu <- c(-20,-10,0,7,18)
sd <- rep(2,q)
priors <- list()
priors$k <- q
priors$mu <- c(-20,-10,0,7,18)
priors$mu.sd <- rep(30,q)
priors$sigma <- rep(2,q)
priors$sigma.nu <- rep(0.125,q)
prioraux <- priors
prioraux$beta <- c(0,1)
mh<- list(algorithm="pseudolikelihood", bandwidth=1)
resaux<- mcmcPotts(pcascore1, neigh, block, prioraux, mh, 1, 0)
labels <- resaux$z # this is just to get the correct data type
#random initialization of the labels
for(i in 1:dim(pixels)[1]){
labels[i,] = rep(0,q)
labels[i,which.max(runif(q))] = 1
}
resbc <- gibbsPotts(pcascore1, labels, betacritic, mu, sd, neigh, block, priors, niter = 10000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = turbo(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
resbc <- gibbsPotts(pcascore1, labels, 2*betacritic, mu, sd, neigh, block, priors, niter = 10000)
clusteringgibbs <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
clusteringgibbs[pixels[i,1],pixels[i,2]] = which.max(resbc$z[i,])
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringgibbs, border=NA,asp = TRUE,col = turbo(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
rectangular_mask <-matrix(1,max_number_of_pixels[1],max_number_of_pixels[2])
neigh <- getNeighbors(mask = rectangular_mask, c(2,2,0,0))
block <- getBlocks(mask = rectangular_mask, 2)
mask_idx = 1
pca_rect <-rep(100,max_number_of_pixels[1]*max_number_of_pixels[2])
for(i in 1:max_number_of_pixels[1]){
for(j in 1:max_number_of_pixels[2]){
if(mask[i,j]==1){
pca_rect[(i-1)*max_number_of_pixels[2]+j] = pcascore1[mask_idx]
mask_idx = mask_idx+1
}
}
}
q <- 6
betacritic = log(1 + sqrt(q))
mu <- rep(0,q)
sd <- c(rep(10,q-1),0.1)
priors <- list()
priors$k <- q
priors$mu <- c(-20,-10,0,7,18,100)
priors$mu.sd <- c(rep(10,q-1),0.1)
priors$sigma <- c(rep(2,q-1),0.1)
priors$sigma.nu <- rep(0.5,q)
prioraux <- priors
prioraux$beta <- c(0,1)
mh<- list(algorithm="pseudolikelihood", bandwidth=1)
resaux<- mcmcPotts(pca_rect, neigh, block, prioraux, mh, 1, 0)
labels <- resaux$z # this is just to get the correct data type
#random initialization of the labels
for(i in 1:dim(pixels)[1]){
labels[i,] = rep(0,q)
labels[i,which.max(runif(q))] = 1
}
resr <- gibbsPotts(pca_rect, labels, betacritic, mu, sd, neigh, block, priors, niter = 10000)
clusteringrect <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:max_number_of_pixels[1]){
for(j in 1:max_number_of_pixels[2]){
clusteringrect[i,j] = which.max(resr$z[(i-1)*max_number_of_pixels[2]+j,])
}
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringrect, border=NA,asp = TRUE,col = turbo(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
resr <- gibbsPotts(pca_rect, labels, 2*betacritic, mu, sd, neigh, block, priors, niter = 10000)
clusteringrect <-matrix(NA,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:max_number_of_pixels[1]){
for(j in 1:max_number_of_pixels[2]){
clusteringrect[i,j] = which.max(resr$z[(i-1)*max_number_of_pixels[2]+j,])
}
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringrect, border=NA,asp = TRUE,col = turbo(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
square_mask <-matrix(1,max_number_of_pixels[2],max_number_of_pixels[2])
neigh <- getNeighbors(mask = square_mask, c(2,2,0,0))
block <- getBlocks(mask = square_mask, 2)
mask <-matrix(0,max_number_of_pixels[1],max_number_of_pixels[2])
for(i in 1:dim(pixels)[1]){
mask[pixels[i,1],pixels[i,2]] = 1
}
mask_idx = 1
pca_square <-rep(100,max_number_of_pixels[2]*max_number_of_pixels[2])
for(i in 1:max_number_of_pixels[1]){
for(j in 1:max_number_of_pixels[2]){
if(mask[i,j]==1){
pca_square[10*178+(i-1)*max_number_of_pixels[2]+j] = pcascore1[mask_idx]
mask_idx = mask_idx+1
}
}
}
q <- 7
betacritic6 = log(1 + sqrt(q))
mu <- c(-23,-15,-7,0,7,15,100)
sd <- c(rep(5,q-1),1)
priors <- list()
priors$k <- q
priors$mu <- c(-23,-15,-7,0,7,15,100)
priors$mu.sd <- c(rep(10,q-1),0.01)
priors$sigma <- c(rep(2,q-1),0.1)
priors$sigma.nu <- c(rep(0.5,q-1),1)
priors$beta <- c(0,5*betacritic6)
mh <- list(algorithm="pseudolikelihood", bandwidth=1)
resaux <- mcmcPotts(pca_square, neigh, block, priors6, mh6, 1, 0)
q <- 7
betacritic6 = log(1 + sqrt(q))
mu <- c(-23,-15,-7,0,7,15,100)
sd <- c(rep(5,q-1),1)
priors <- list()
priors$k <- q
priors$mu <- c(-23,-15,-7,0,7,15,100)
priors$mu.sd <- c(rep(10,q-1),0.01)
priors$sigma <- c(rep(2,q-1),0.1)
priors$sigma.nu <- c(rep(0.5,q-1),1)
priors$beta <- c(0,5*betacritic6)
mh <- list(algorithm="pseudolikelihood", bandwidth=1)
resaux <- mcmcPotts(pca_square, neigh, block, priors, mh, 1, 0)
labels <- res6aux$z # this is just to get the correct data type
q <- 7
betacritic6 = log(1 + sqrt(q))
mu <- c(-23,-15,-7,0,7,15,100)
sd <- c(rep(5,q-1),1)
priors <- list()
priors$k <- q
priors$mu <- c(-23,-15,-7,0,7,15,100)
priors$mu.sd <- c(rep(10,q-1),0.01)
priors$sigma <- c(rep(2,q-1),0.1)
priors$sigma.nu <- c(rep(0.5,q-1),1)
priors$beta <- c(0,5*betacritic6)
mh <- list(algorithm="pseudolikelihood", bandwidth=1)
resaux <- mcmcPotts(pca_square, neigh, block, priors, mh, 1, 0)
labels <- resaux$z # this is just to get the correct data type
#random initialization of the labels
for(i in 1:dim(pixels)[1]){
labels[i,] = rep(0,q)
labels[i,which.max(runif(q))] = 1
}
ressquare <- gibbsPotts(pca_square, labels, betacritic6, mu, sd, neigh, block, priors, niter = 5000)
clusteringsquare <-matrix(NA,max_number_of_pixels[2],max_number_of_pixels[2])
for(i in 1:max_number_of_pixels[2]){
for(j in 1:max_number_of_pixels[2]){
clusteringsquare[i,j] = which.max(ressquare$z[(i-1)*max_number_of_pixels[2]+j,])
}
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringsquare, border=NA,asp = TRUE,col = turbo(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
ressquare <- gibbsPotts(pca_square, labels, 2*betacritic6, mu, sd, neigh, block, priors, niter = 5000)
clusteringsquare <-matrix(NA,max_number_of_pixels[2],max_number_of_pixels[2])
for(i in 1:max_number_of_pixels[2]){
for(j in 1:max_number_of_pixels[2]){
clusteringsquare[i,j] = which.max(ressquare$z[(i-1)*max_number_of_pixels[2]+j,])
}
}
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(clusteringsquare, border=NA,asp = TRUE,col = turbo(q),axis.col=NULL, axis.row=NULL, xlab='', ylab='',key = NULL)
